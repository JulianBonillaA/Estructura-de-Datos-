# Definir el grafo como un diccionario de adyacencia con costos
grafo = {
    "CDMX": {"EdoMex": 50, "Puebla": 80, "Querétaro": 100},
    "EdoMex": {"CDMX": 50, "Guerrero": 120, "Michoacán": 90},
    "Puebla": {"CDMX": 80, "Veracruz": 150},
    "Querétaro": {"CDMX": 100, "San Luis Potosí": 200},
    "Guerrero": {"EdoMex": 120, "Michoacán": 70},
    "Michoacán": {"EdoMex": 90, "Guerrero": 70},
    "Veracruz": {"Puebla": 150, "San Luis Potosí": 250},
    "San Luis Potosí": {"Querétaro": 200, "Veracruz": 250}
}

# Función para recorrer el grafo sin repetir estados (DFS)
def recorrido_sin_repetir(grafo, inicio, visitados=None):
    if visitados is None:
        visitados = set()
    visitados.add(inicio)
    recorrido = [inicio]
    
    for vecino in grafo[inicio]:
        if vecino not in visitados:
            recorrido.extend(recorrido_sin_repetir(grafo, vecino, visitados))
    
    return recorrido

# Función para recorrer el grafo repitiendo al menos un estado
def recorrido_con_repeticion(grafo, inicio):
    recorrido = recorrido_sin_repetir(grafo, inicio)
    if len(recorrido) > 1:
        recorrido.append(recorrido[1])  # Repetimos un estado
    return recorrido

# Función para calcular el costo de un recorrido
def costo_total(grafo, recorrido):
    costo = 0
    for i in range(len(recorrido) - 1):
        costo += grafo[recorrido[i]][recorrido[i + 1]]
    return costo

# Estado de inicio
inicio = "CDMX"

# Obtener recorridos
ruta_sin_repetir = recorrido_sin_repetir(grafo, inicio)
ruta_con_repeticion = recorrido_con_repeticion(grafo, inicio)

# Calcular costos
costo_sin_repetir = costo_total(grafo, ruta_sin_repetir)
costo_con_repeticion = costo_total(grafo, ruta_con_repeticion)

# Mostrar resultados
print("Recorrido sin repetir estados:", " → ".join(ruta_sin_repetir))
print("Costo total sin repetir:", costo_sin_repetir)

print("\nRecorrido con repetición de al menos un estado:", " → ".join(ruta_con_repeticion))
print("Costo total con repetición:", costo_con_repeticion)

# Mostrar estados y sus relaciones
print("\nEstados y conexiones:")
for estado, conexiones in grafo.items():
    print(f"{estado}: {', '.join([f'{k} ({v})' for k, v in conexiones.items()])}")
